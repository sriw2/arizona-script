import logging
import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

API_TOKEN = '8366675375:AAGIO_sT7pSowUlI4_-5xmCZV5_YAoNVa-Q'
ADMIN_ID = 6712617550  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

DATA_FILE = 'data.json'

logging.basicConfig(level=logging.INFO)

class AddCategory(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_script_category = State()
    waiting_for_script_name = State()
    waiting_for_script_content = State()
    waiting_for_script_description = State()

storage = MemoryStorage()
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(storage=storage)

def load_data():
    if not os.path.exists(DATA_FILE):
        return {'categories': {}}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def main_menu_keyboard(is_admin=False):
    builder = ReplyKeyboardBuilder()
    builder.button(text='üìú –°–∫—Ä–∏–ø—Ç—ã')
    builder.button(text='üí¨ –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º')
    if is_admin:
        builder.button(text='üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def admin_panel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç')
    builder.button(text='‚¨ÖÔ∏è –í –º–µ–Ω—é')
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def categories_keyboard(data):
    builder = InlineKeyboardBuilder()
    for cat in data['categories']:
        builder.button(text=f"üìÇ {cat}", callback_data=f"category:{cat}")
    builder.adjust(1)
    return builder.as_markup()

def scripts_keyboard(category, data):
    builder = InlineKeyboardBuilder()
    for script in data['categories'][category]['scripts']:
        builder.button(text=f"üìù {script}", callback_data=f"script:{category}:{script}")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    is_admin = message.from_user.id == ADMIN_ID
    text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç, {0}!</b>\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ScriptHub</b> ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!\n\n"
        "üìú <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?</b>\n"
        "‚Äî –£–¥–æ–±–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Äî –û—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
        "‚Äî –í—Å–µ–≥–¥–∞ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º\n\n"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: <a href='https://t.me/cleodis'>https://t.me/cleodis</a>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    ).format(message.from_user.first_name)
    await message.answer(text, reply_markup=main_menu_keyboard(is_admin))
    await state.clear()

@dp.message(F.text == "üìú –°–∫—Ä–∏–ø—Ç—ã")
async def list_categories(message: types.Message):
    data = load_data()
    if not data['categories']:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard(data))

@dp.message(F.text == "üí¨ –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
async def contact_dev(message: types.Message):
    await message.answer(
        "üì¨ <b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:</b>\n"
        "–ü–∏—à–∏—Ç–µ –≤ Telegram: <a href='https://t.me/bunkoc'>@bunkoc</a>"
    )

@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_panel_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddCategory.waiting_for_category_name)

@dp.message(AddCategory.waiting_for_category_name)
async def add_category_receive_name(message: types.Message, state: FSMContext):
    category_name = message.text.strip()
    data = load_data()
    if category_name in data['categories']:
        await message.answer("–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return
    data['categories'][category_name] = {"scripts": {}}
    save_data(data)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_panel_keyboard())
    await state.clear()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
async def add_script_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    data = load_data()
    if not data['categories']:
        await message.answer("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return
    builder = ReplyKeyboardBuilder()
    for cat in data['categories']:
        builder.button(text=cat)
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")
    builder.adjust(1)
    await message.answer("–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç?", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(AddCategory.waiting_for_script_category)

@dp.message(AddCategory.waiting_for_script_category)
async def add_script_receive_category(message: types.Message, state: FSMContext):
    category = message.text.strip()
    data = load_data()
    if category not in data['categories']:
        await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    await state.update_data(category=category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞:")
    await state.set_state(AddCategory.waiting_for_script_name)

@dp.message(AddCategory.waiting_for_script_name)
async def add_script_receive_name(message: types.Message, state: FSMContext):
    script_name = message.text.strip()
    user_data = await state.get_data()
    category = user_data['category']
    data = load_data()
    if script_name in data['categories'][category]['scripts']:
        await message.answer("–°–∫—Ä–∏–ø—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await state.clear()
        return
    await state.update_data(script_name=script_name)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∞–º —Å–∫—Ä–∏–ø—Ç (—Ç–µ–∫—Å—Ç):")
    await state.set_state(AddCategory.waiting_for_script_content)

@dp.message(AddCategory.waiting_for_script_content)
async def add_script_receive_content(message: types.Message, state: FSMContext):
    script_content = message.text.strip()
    user_data = await state.get_data()
    category = user_data['category']
    script_name = user_data['script_name']
    await state.update_data(script_content=script_content)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ (–º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ü–∏—Ç–∞—Ç–æ–π):")
    await state.set_state(AddCategory.waiting_for_script_description)

@dp.message(AddCategory.waiting_for_script_description)
async def add_script_receive_description(message: types.Message, state: FSMContext):
    script_description = message.text.strip()
    user_data = await state.get_data()
    category = user_data['category']
    script_name = user_data['script_name']
    script_content = user_data['script_content']
    data = load_data()
    data['categories'][category]['scripts'][script_name] = {
        "content": script_content,
        "description": script_description
    }
    save_data(data)
    await message.answer("–°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_panel_keyboard())
    await state.clear()

@dp.message(F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(is_admin))

@dp.callback_query(F.data.startswith("category:"))
async def show_scripts_in_category(callback: types.CallbackQuery):
    category = callback.data.split(":", 1)[1]
    data = load_data()
    if category not in data['categories']:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    scripts = data['categories'][category]['scripts']
    if not scripts:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤.")
        return
    await callback.message.answer(
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç:",
        reply_markup=scripts_keyboard(category, data)
    )

@dp.callback_query(F.data.startswith("script:"))
async def show_script(callback: types.CallbackQuery):
    _, category, script_name = callback.data.split(":", 2)
    data = load_data()
    script = data['categories'][category]['scripts'][script_name]
    desc = script['description']
    script_content = script['content']
    text = (
        f"<b>üìù {script_name}</b>\n"
        f"<i>{desc}</i>\n\n"
        f"<code>{script_content}</code>"
    )
    await callback.message.answer(text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
